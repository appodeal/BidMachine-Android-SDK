apply plugin: 'com.android.library'

import java.util.function.BiConsumer
import java.util.regex.Matcher
import java.util.regex.Pattern

def generateAdapterAsset(variant) {
    String configClassPath = null

    println '----------------------------------------'
    variant.sourceSets.forEach { source ->
        source.javaDirectories.forEach { file ->
            if (!file.isFile()) {
                fileTree(file)
                        .findAll { it.isFile() && it.name.endsWith(".java") }
                        .forEach { f ->
                    def javaFile = new File(f.path)
                    if (!javaFile.canRead()) {
                        throw new GradleException("Java file can't be readed")
                    }
                    if (f.name.endsWith(".java") && !javaFile.isDirectory()) {
                        def javaFileContent = javaFile.text

                        if (javaFileContent.contains("extends NetworkConfig")) {
                            println("--- Found network builder: " + javaFile.path)
                            String packageRegExp = "(?:\\s*)(?:package)(?:\\s*)([\\w-_.]*)?(?:\\s*)(?:;)"
                            String classRegExp = "(?:.*)(?:class)(?:\\s)([\\w-_.]*)(?:\\s)(?:.*?)(?:extends(.*))(?:.*)(\\{)"

                            Matcher packageMatcher = Pattern.compile(packageRegExp).matcher(javaFileContent)
                            Matcher classMatcher = Pattern.compile(classRegExp).matcher(javaFileContent)

                            if (packageMatcher.find() && classMatcher.find()) {
                                def classPackage = packageMatcher.group(1)
                                def className = classMatcher.group(1)

                                println("classPackage: " + classPackage + ", className: " + className)
                                configClassPath = classPackage + "." + className
                            }
                        }
                    }
                }
            }
        }
    }
    if (configClassPath == null) {
        throw GradleException("configClassPath not found")
    }
    Map<String, String> values = new HashMap<>()
    values.put("name", '\"' + project.name + '\"')
    values.put("version", project.android.defaultConfig.versionName)
    values.put("classpath", "\"" + configClassPath + "\"")
    StringBuilder jsonOutput = new StringBuilder()
    values.forEach(new BiConsumer<String, String>() {
        @Override
        void accept(String k, String v) {
            if (jsonOutput.length() > 0) {
                jsonOutput.append(",")
            }
            jsonOutput.append("\"$k\":$v")
        }
    })
    jsonOutput.insert(0, "{")
    jsonOutput.append("}")
    println("variant ${variant.name} data: " + jsonOutput.toString())

    def outFile = file("${variant.mergeAssets.outputDir}/bm_networks/${project.name}.bmnetwork")
    outFile.parentFile.mkdirs()
    outFile.text = jsonOutput.toString()
}

gradle.projectsEvaluated {
    packageDebugAssets.doLast {
        android.libraryVariants.forEach { variant ->
            generateAdapterAsset(variant)
        }
    }
    packageReleaseAssets.doLast {
        android.libraryVariants.forEach { variant ->
            generateAdapterAsset(variant)
        }
    }
}